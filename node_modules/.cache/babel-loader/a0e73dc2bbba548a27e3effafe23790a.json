{"ast":null,"code":"var _jsxFileName = \"D:\\\\Front_end _CyberSoft\\\\CodeMau_Poker\\\\src\\\\pages\\\\Game\\\\index.jsx\";\nimport React, { Fragment, useEffect, memo } from \"react\"; // memo có tác dụng như killComponent : có tác dụng khi component cha ko liên quan component game (thì khi cha nó load thì component này mới load)\n\nimport \"./index.css\";\nimport Controls from \"../../components/Control\";\nimport Main from \"../../components/Main\";\nimport axios from \"axios\";\nimport { useDispatch } from \"react-redux\";\n\nconst Game = () => {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    axios({\n      method: \"GET\",\n      url: \"https://deckofcardsapi.com/api/deck/new/\"\n    }).then(res => {\n      dispatch({\n        type: \"SET_DECK_CARD\",\n        payload: res.data\n      });\n    }).catch(er => {\n      console.log(er);\n    });\n  }, [dispatch]); // []: rỗng sẽ chạy 1 lần , nếu có biến trong dependency thì nó sẽ render dựa  theo biến trong đó . Neếu ko có [] (ko có dependency thì sẽ render lại 3 lần : didmount , didUpdate, willUnMount)\n  // Phải có dependency\n  // use Effect (life cycle) là didmount là [] , didupdate [biến],willunmout\n\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Controls, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Main, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }));\n}; // fragment có tác dụng như <> </>\n\n\nexport default memo(Game);","map":{"version":3,"sources":["D:/Front_end _CyberSoft/CodeMau_Poker/src/pages/Game/index.jsx"],"names":["React","Fragment","useEffect","memo","Controls","Main","axios","useDispatch","Game","dispatch","method","url","then","res","type","payload","data","catch","er","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,IAArC,QAAiD,OAAjD,C,CACA;;AACA,OAAO,aAAP;AACA,OAAOC,QAAP,MAAqB,0BAArB;AACA,OAAOC,IAAP,MAAiB,uBAAjB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B;;AAEA,MAAMC,IAAI,GAAG,MAAM;AACjB,QAAMC,QAAQ,GAAGF,WAAW,EAA5B;AAEAL,EAAAA,SAAS,CAAC,MAAM;AACdI,IAAAA,KAAK,CAAC;AACJI,MAAAA,MAAM,EAAE,KADJ;AAEJC,MAAAA,GAAG,EAAE;AAFD,KAAD,CAAL,CAIGC,IAJH,CAISC,GAAD,IAAS;AACbJ,MAAAA,QAAQ,CAAC;AAAEK,QAAAA,IAAI,EAAE,eAAR;AAAyBC,QAAAA,OAAO,EAAEF,GAAG,CAACG;AAAtC,OAAD,CAAR;AACD,KANH,EAOGC,KAPH,CAOUC,EAAD,IAAQ;AACbC,MAAAA,OAAO,CAACC,GAAR,CAAYF,EAAZ;AACD,KATH;AAUD,GAXQ,EAWN,CAACT,QAAD,CAXM,CAAT,CAHiB,CAejB;AACA;AACA;;AACA,sBACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAMD,CAxBD,C,CAyBA;;;AAEA,eAAeN,IAAI,CAACK,IAAD,CAAnB","sourcesContent":["import React, { Fragment, useEffect, memo } from \"react\";\r\n// memo có tác dụng như killComponent : có tác dụng khi component cha ko liên quan component game (thì khi cha nó load thì component này mới load)\r\nimport \"./index.css\";\r\nimport Controls from \"../../components/Control\";\r\nimport Main from \"../../components/Main\";\r\nimport axios from \"axios\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nconst Game = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    axios({\r\n      method: \"GET\",\r\n      url: \"https://deckofcardsapi.com/api/deck/new/\",\r\n    })\r\n      .then((res) => {\r\n        dispatch({ type: \"SET_DECK_CARD\", payload: res.data });\r\n      })\r\n      .catch((er) => {\r\n        console.log(er);\r\n      });\r\n  }, [dispatch]);\r\n  // []: rỗng sẽ chạy 1 lần , nếu có biến trong dependency thì nó sẽ render dựa  theo biến trong đó . Neếu ko có [] (ko có dependency thì sẽ render lại 3 lần : didmount , didUpdate, willUnMount)\r\n  // Phải có dependency\r\n  // use Effect (life cycle) là didmount là [] , didupdate [biến],willunmout\r\n  return (\r\n    <Fragment>\r\n      <Controls />\r\n      <Main />\r\n    </Fragment>\r\n  );\r\n};\r\n// fragment có tác dụng như <> </>\r\n\r\nexport default memo(Game);\r\n"]},"metadata":{},"sourceType":"module"}